Solaris Build Instructions
==========================

Preparing the Build Environment:
--------------------------------

Pion currently only supports the GCC (g++) compiler when building under
Solaris.  We plan to add support for the Sun Studio C++ compiler in the near
future, after support for it is added to the ASIO library.

The easiest way to setup a build environment in Solaris is to download and
install the following packages from http://www.sunfreeware.com/:
gcc, zlib and openssl.

Make sure that the "make" and "ar" utilities are in your PATH. 
Normally, these are installed in the /usr/ccs/bin directory, which for
some reason is not included in the default PATH.  Also, make sure that
/usr/local/bin is included in your PATH.


Building Boost with ASIO:
-------------------------

Please see the README.boost file for instructions.

Boost 1.34.1 on Solaris seems to incorrectly detect the presense of the ICU
library (for Unicode support), and enables support for it even though the
development libraries are not actually installed and available, and contrary
to Boost's documentation (which claims incorrectly that it is always disabled
by default).  Therefore, you will need to explicity disable ICU support when
configuring Boost.  If you are using the configure script, add the parameter
"--without-icu".  If you are using bjam, add the parameter "-sHAVE_ICU=0".

Boost's build system is currently (as of 1.34.1) unable to detect the linker
you are using, and therefore may pass incorrect arguments causing libraries
to not be built correctly.  This is especially a problem under Solaris if
you are using the GCC distribution from SunFreeware.com because it uses
the linker bundled with Solaris while Boost assumes the GCC toolset always
uses the GCC linker.  Luckily, the build system lets you tell it explicitly
what linker you are using by modifying your "user-config.jam" file.

If you are building Boost using the "configure" script, first run the
"configure" command and then modify the "user-config.jam" file that it
generates in Boost's root directory (change the existing "using gcc" line).
If you are using Boost::Build (bjam), you need to instead modify the
"user-config.jam" file in the "tools/build/v2" subdirectory (add the following
line within the "GCC configuration" section):

using gcc : : g++ : <linker-type>sun ;


Installing zlib & openssl:
--------------------------

ASIO requires zlib and openssl for compression and SSL/TLS encryption
support, respectively.  On Solaris, we recommend that you download and
install the packages available on SunFreeware.com. However, you may
instead choose to download and install the latest versions from the
following sites:

http://www.zlib.net
http://www.openssl.org


Logging frameworks:
-------------------

Note that the use of a logging framework is entirely optional, so you may
skip this step if you like.

If you wish to use one of the supported logging frameworks with Pion,
you will need to download and install it from source, since none of them
are currently available pre-built for Solaris.  The current releases of
the log4cpp and log4cplus libraries do not seem to build correctly under
Solaris, so you will have to use the log4cxx library.  You can download
the source tarball for log4cxx from:

http://logging.apache.org/log4cxx

Please see the log4cxx documentation for more information on how to build
and install this library.


Building and installing Pion:
-----------------------------

Now you should be able to build and install Pion:

tar xvfz pion-<PROJECT>-<VERSION>.tar.gz
cd pion-<PROJECT>-<VERSION>
./configure [--with-boost=<BOOST_DIR>] \
	[--with-openssl=/usr/local/ssl] [--with-log4cxx=/opt/local]
make ; sudo make install

To build and run Pion's unit tests, run "make check"

Note that you only need to specify a "--with-boost=<BOOST_DIR>" parameter to
Pion's configure script if you installed Boost into an alternative directory
(other than /usr/local).


Known problems:
---------------

If you're using the gcc compiler distributed at http://www.sunfreeware.com,
you may encountered errors about not being able to find the libstdc++ shared
library (and others).  If this happens, try setting the LD_LIBRARY_PATH
variable to include /usr/local/lib/.  You should also include the Boost
libraries and the logging library (if used) in this path:

export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/ssl/lib
