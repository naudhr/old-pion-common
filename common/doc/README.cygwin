Cygwin/GNU C++ Build Instructions
=================================

For building under Windows, only the Cygwin/GNU C++ compiler (g++) and
Microsoft's Visual C++ 2005 compiler are currently supported. We plan to add
support for the MinGW compiler in the near future. Please see README.msvc for
instructions on using Microsoft's Visual C++ compiler.


Installing Cygwin Packages:
---------------------------

In order to configure Pion, you will need to install the bash shell and
GNU make programs.  We recommend that you download and install the programs
included with Cygwin from http://www.cygwin.com/.  The bash shell is included
by default; however, you will need to add the make package (it is located
within the "Devel" group).  For a complete development environment, we
recommend also installing the following Cygwin packages:

Archive: unzip zip
Devel: binutils autoconf automake gcc-g++ gdb libtool make openssl-devel 
       subversion
Editors: nano
Net: openssh
Perl: perl
Utils: patch
Web: wget


Building Boost with ASIO:
-------------------------

Please see the README.boost file for instructions.

Boost 1.34.1 includes a bug (Boost ticket #1062) that you will need to 
patch before building it under Cygwin.  A patch file to fix this bug is
included in the "<PROJECT_ROOT>/common/doc" directory:

patch -p0 < <PROJECT_ROOT>/common/doc/cygwin_boost_1_34_1.patch

There is one more bug in 1.34.1 that you need to fix after building and 
installing the Boost libraries (Boost ticket #1058).  Boost names the 
"import" libraries using a format that is incompatable with GNU's 
libtool (they use the format "boost_*.dll.a" instead of 
"libboost_*.dll.a").  You can fix this by creating symbolic links for 
the libraries needed by Pion:

cd BOOST_INSTALL_DIR/lib
ln -s boost_thread-gcc34-mt.dll.a libboost_thread-gcc34-mt.dll.a
ln -s boost_system-gcc34-mt.dll.a libboost_system-gcc34-mt.dll.a
ln -s boost_filesystem-gcc34-mt.dll.a libboost_filesystem-gcc34-mt.dll.a
ln -s boost_regex-gcc34-mt.dll.a libboost_regex-gcc34-mt.dll.a
ln -s boost_date_time-gcc34-mt.dll.a libboost_date_time-gcc34-mt.dll.a
ln -s boost_unit_test_framekwork-gcc34-mt.dll.a libboost_unit_test_framework-gcc34-mt.dll.a

These patches may be unnecessary for Boost 1.34.2 and later releases.


Installing zlib & openssl:
--------------------------

ASIO requires zlib and openssl for compression and SSL/TLS encryption
support, respectively.  On Windows, we recommend that you use Cygwin to
install these libraries. However, you may instead choose to download and
install the latest versions from the following sites:

http://www.zlib.net
http://www.openssl.org


Logging frameworks:
-------------------

Note that the use of a logging framework is entirely optional, so you may
skip this step if you like.

At this time, none of the supported logging libraries build correctly
under Windows.  If you'd like to help add support for these, you can
download the current source code from the following sites:

http://logging.apache.org/log4cxx
http://log4cpp.sourceforge.net
http://log4cplus.sourceforge.net


Building and installing Pion:
-----------------------------

Now you should be able to build and install Pion:
(the "-D_WIN32_WINNT=0x500" eliminates warnings in ASIO)

tar xvfz pion-<PROJECT>-<VERSION>.tar.gz
cd pion-<PROJECT>-<VERSION>
CPPFLAGS="-D_WIN32_WINNT=0x500" \
	./configure [--with-boost=<BOOST_DIR>] [--with-openssl]
make all install

To build and run Pion's unit tests, run "make check"

Note that you only need to specify a "--with-boost=<BOOST_DIR>" parameter to
Pion's configure script if you installed Boost into an alternative directory
(other than /usr/local).


Known Problems:
---------------

The POSIX path emulation layer provided by cygwin sometimes confused the
boost::filesystem library.  Pion includes some extra code for cygwin to
try to find the path you actually want.  If you are using Pion in a
cygwin environment, you may need to configure your cygwin installation
directory using the parameter "--with-cygwin=[directory]" (the default is
"c:/cygwin").  Please see the boost::filesystem documenation for more
information: http://www.boost.org/libs/filesystem/doc/index.htm

If Windows cannot find all the shared libraries used by your program, it will
simply exit immediately without printing any messages.  To see what shared
libraries (or DLLs) a program uses, you can use the following command:

objdump -p <PROGRAM> | grep "DLL Name"

You may want to make sure that your executables can find the Boost DLLs
located in "lib" subdirectory of your installation path by adding the
directory to your PATH:

export PATH=/usr/local/lib:$PATH

(assuming that you are using the default prefix of /usr/local/lib)
